>@network
#^^^^^^^^ source.vehicle keyword.other.declaration.network.vehicle
>f : Tensor Rat [1] -> Tensor Rat [1]
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.colon.vehicle
#   ^ source.vehicle
#    ^^^^^^ source.vehicle support.type.tensor.vehicle
#          ^ source.vehicle
#           ^^^ source.vehicle support.type.rat.vehicle
#              ^^ source.vehicle
#                ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                 ^^ source.vehicle
#                   ^^ source.vehicle keyword.operator.arrow.vehicle
#                     ^ source.vehicle
#                      ^^^^^^ source.vehicle support.type.tensor.vehicle
#                            ^ source.vehicle
#                             ^^^ source.vehicle support.type.rat.vehicle
#                                ^^ source.vehicle
#                                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                   ^^ source.vehicle
>
>myForall : Rat -> Bool
#^^^ source.vehicle
#   ^^ source.vehicle keyword.operator.or.vehicle
#     ^^^^ source.vehicle
#         ^ source.vehicle keyword.operator.colon.vehicle
#          ^ source.vehicle
#           ^^^ source.vehicle support.type.rat.vehicle
#              ^ source.vehicle
#               ^^ source.vehicle keyword.operator.arrow.vehicle
#                 ^ source.vehicle
#                  ^^^^ source.vehicle support.type.bool.vehicle
>myForall y = forall x . f x ! 0 >= y
#^^^ source.vehicle
#   ^^ source.vehicle keyword.operator.or.vehicle
#     ^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.define.vehicle
#            ^ source.vehicle
#             ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                   ^^^ source.vehicle
#                      ^ source.vehicle keyword.operator.dot.vehicle
#                       ^^^^^ source.vehicle
#                            ^ source.vehicle keyword.operator.lookup.vehicle
#                             ^ source.vehicle
#                              ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                               ^ source.vehicle
#                                ^^ source.vehicle keyword.operator.gte.vehicle
#                                  ^^^ source.vehicle
>
>notApp : (Rat -> Bool) -> Rat -> Bool
#^^^^^^^ source.vehicle
#       ^ source.vehicle keyword.operator.colon.vehicle
#        ^^ source.vehicle
#          ^^^ source.vehicle support.type.rat.vehicle
#             ^ source.vehicle
#              ^^ source.vehicle keyword.operator.arrow.vehicle
#                ^ source.vehicle
#                 ^^^^ source.vehicle support.type.bool.vehicle
#                     ^^ source.vehicle
#                       ^^ source.vehicle keyword.operator.arrow.vehicle
#                         ^ source.vehicle
#                          ^^^ source.vehicle support.type.rat.vehicle
#                             ^ source.vehicle
#                              ^^ source.vehicle keyword.operator.arrow.vehicle
#                                ^ source.vehicle
#                                 ^^^^ source.vehicle support.type.bool.vehicle
>notApp (f : Rat -> Bool) x = not (f x)
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^ source.vehicle support.type.rat.vehicle
#               ^ source.vehicle
#                ^^ source.vehicle keyword.operator.arrow.vehicle
#                  ^ source.vehicle
#                   ^^^^ source.vehicle support.type.bool.vehicle
#                       ^^^^ source.vehicle
#                           ^ source.vehicle keyword.operator.define.vehicle
#                            ^ source.vehicle
#                             ^^^ source.vehicle constant.language.not.vehicle
#                                ^^^^^^^ source.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>p : Bool
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.colon.vehicle
#   ^ source.vehicle
#    ^^^^ source.vehicle support.type.bool.vehicle
>p = forall y . notApp myForall y
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.define.vehicle
#   ^ source.vehicle
#    ^^^^^^ source.vehicle keyword.control.forall.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.dot.vehicle
#              ^^^^^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.or.vehicle
#                           ^^^^^^ source.vehicle
>