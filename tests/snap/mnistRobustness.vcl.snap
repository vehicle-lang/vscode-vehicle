>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Inputs and outputs
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Define the type for our input images
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>type Image = Tensor Rat [28, 28]
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.define.vehicle
#            ^ source.vehicle
#             ^^^^^^ source.vehicle support.type.tensor.vehicle
#                   ^ source.vehicle
#                    ^^^ source.vehicle support.type.rat.vehicle
#                       ^^ source.vehicle
#                         ^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                           ^^ source.vehicle
#                             ^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                               ^^ source.vehicle
>
>-- The type of the output labels
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- i.e a number between 0 and 9, one for each digit
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>type Label = Index 10
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.define.vehicle
#            ^ source.vehicle
#             ^^^^^ source.vehicle support.type.index.vehicle
#                  ^ source.vehicle
#                   ^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>-- A predicate that states that all the pixel values in a given image are
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- in the range 0.0 to 1.0
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>validImage : Image -> Bool
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^^^^^^^ source.vehicle
#                   ^^ source.vehicle keyword.operator.arrow.vehicle
#                     ^ source.vehicle
#                      ^^^^ source.vehicle support.type.bool.vehicle
>validImage x = forall i j . 0 <= x ! i ! j <= 1
#^^^^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.define.vehicle
#              ^^ source.vehicle
#                ^^ source.vehicle keyword.operator.or.vehicle
#                  ^^^^^^^^ source.vehicle
#                          ^ source.vehicle keyword.operator.dot.vehicle
#                           ^ source.vehicle
#                            ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                             ^ source.vehicle
#                              ^^ source.vehicle keyword.operator.lte.vehicle
#                                ^^^ source.vehicle
#                                   ^ source.vehicle keyword.operator.lookup.vehicle
#                                    ^^^ source.vehicle
#                                       ^ source.vehicle keyword.operator.lookup.vehicle
#                                        ^^^ source.vehicle
#                                           ^^ source.vehicle keyword.operator.lte.vehicle
#                                             ^ source.vehicle
#                                              ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Network
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Declare the network used to classify images. The output of the network is a
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- score for each of the digits 0 to 9.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>network mnist : Image -> Tensor Rat [10]
#^^^^^^^ source.vehicle keyword.other.declaration.network.vehicle
#       ^^^^^^^ source.vehicle
#              ^ source.vehicle keyword.operator.colon.vehicle
#               ^^^^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.arrow.vehicle
#                        ^ source.vehicle
#                         ^^^^^^ source.vehicle support.type.tensor.vehicle
#                               ^ source.vehicle
#                                ^^^ source.vehicle support.type.rat.vehicle
#                                   ^^ source.vehicle
#                                     ^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                       ^^ source.vehicle
>
>-- The network advises that input image `x` has label `i` if the score
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- for label `i` is greater than the score of any other label `j`.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>advises : Image -> Label -> Bool
#^^^^^^^^ source.vehicle
#        ^ source.vehicle keyword.operator.colon.vehicle
#         ^^^^^^^ source.vehicle
#                ^^ source.vehicle keyword.operator.arrow.vehicle
#                  ^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.arrow.vehicle
#                           ^ source.vehicle
#                            ^^^^ source.vehicle support.type.bool.vehicle
>advises x i = forall j . j != i => mnist x ! i > mnist x ! j
#^^^^^^^^^^^^ source.vehicle
#            ^ source.vehicle keyword.operator.define.vehicle
#             ^^ source.vehicle
#               ^^ source.vehicle keyword.operator.or.vehicle
#                 ^^^^^^ source.vehicle
#                       ^ source.vehicle keyword.operator.dot.vehicle
#                        ^^^ source.vehicle
#                           ^^ source.vehicle keyword.operator.distinct.vehicle
#                             ^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.implies.vehicle
#                                  ^^^^^^^^^ source.vehicle
#                                           ^ source.vehicle keyword.operator.lookup.vehicle
#                                            ^^^ source.vehicle
#                                               ^ source.vehicle keyword.operator.gt.vehicle
#                                                ^^^^^^^^^ source.vehicle
#                                                         ^ source.vehicle keyword.operator.lookup.vehicle
#                                                          ^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Definition of robustness around a point
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- First we define the parameter `epsilon` that will represent the radius of the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ball that we want the network to be robust in. Note that we declare this as
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- a parameter which allows the value of `epsilon` to be specified at compile
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- time rather than be fixed in the specification.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>parameter epsilon : Rat
#^^^^^^^^^ source.vehicle keyword.other.declaration.parameter.vehicle
#         ^^^^^^^^^ source.vehicle
#                  ^ source.vehicle keyword.operator.colon.vehicle
#                   ^ source.vehicle
#                    ^^^ source.vehicle support.type.rat.vehicle
>
>-- Next we define what it means for an image `x` to be in a ball of
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- size epsilon around 0.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>boundedByEpsilon : Image -> Bool
#^^^^^^^^^^^^^^^^^ source.vehicle
#                 ^ source.vehicle keyword.operator.colon.vehicle
#                  ^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.arrow.vehicle
#                           ^ source.vehicle
#                            ^^^^ source.vehicle support.type.bool.vehicle
>boundedByEpsilon x = forall i j . -epsilon <= x ! i ! j <= epsilon
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.or.vehicle
#                        ^^^^^^^^ source.vehicle
#                                ^ source.vehicle keyword.operator.dot.vehicle
#                                 ^ source.vehicle
#                                  ^ source.vehicle keyword.operator.sub.vehicle
#                                   ^^^^^^^^ source.vehicle
#                                           ^^ source.vehicle keyword.operator.lte.vehicle
#                                             ^^^ source.vehicle
#                                                ^ source.vehicle keyword.operator.lookup.vehicle
#                                                 ^^^ source.vehicle
#                                                    ^ source.vehicle keyword.operator.lookup.vehicle
#                                                     ^^^ source.vehicle
#                                                        ^^ source.vehicle keyword.operator.lte.vehicle
#                                                          ^^^^^^^^^ source.vehicle
>
>-- We now define what it means for the network to be robust around an image `x`
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- that should be classified as `y`. Namely, that for any perturbation no greater
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- than epsilon then if the perturbed image is still a valid image then the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- network should still advise label `y` for the perturbed version of `x`.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>robustAround : Image -> Label -> Bool
#^^^^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.colon.vehicle
#              ^^^^^^^ source.vehicle
#                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                       ^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.arrow.vehicle
#                                ^ source.vehicle
#                                 ^^^^ source.vehicle support.type.bool.vehicle
>robustAround image label = forall pertubation .
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                         ^ source.vehicle keyword.operator.define.vehicle
#                          ^^ source.vehicle
#                            ^^ source.vehicle keyword.operator.or.vehicle
#                              ^^^^^^^^^^^^^^^^ source.vehicle
#                                              ^ source.vehicle keyword.operator.dot.vehicle
>  let perturbedImage = image - pertubation in
#^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.define.vehicle
#                      ^^^^^^^ source.vehicle
#                             ^ source.vehicle keyword.operator.sub.vehicle
#                              ^^^^^^^^^^^^^^^^ source.vehicle
>  boundedByEpsilon pertubation and validImage perturbedImage =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                               ^^^ source.vehicle keyword.operator.and.vehicle
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                             ^^ source.vehicle keyword.operator.implies.vehicle
>    advises perturbedImage label
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Robustness with respect to a dataset
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- We only really care about the network being robust on the set of images it
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- will encounter. Indeed it is much more challenging to expect the network
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- to be robust around all possible images. After all most images will be just
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- be random noise.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Unfortunately we can't characterise the set of "reasonable" input images.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Instead we approximate it using the training dataset, and ask that the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- network is robust around images in the training dataset.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- We first specify parameter `n` the size of the training dataset. Unlike
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- the earlier parameter `epsilon`, `n` is marked as `implicit` which means
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- that it does not need to be provided manually but instead will be
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- automatically inferred by the compiler. In this case it will be inferred
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- from the training dataset passed.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>implicit parameter n : Nat
#^^^^^^^^ source.vehicle keyword.other.declaration.implicit.vehicle
#        ^ source.vehicle
#         ^^^^^^^^^ source.vehicle keyword.other.declaration.parameter.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.colon.vehicle
#                      ^ source.vehicle
#                       ^^^ source.vehicle support.type.nat.vehicle
>
>-- We next declare two datasets, the training images and the corresponding
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- training labels. Note that we use the previously declared parameter `n`
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- to enforce that they are the same size.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>dataset trainingImages : Tensor Image [n]
#^^^^^^^ source.vehicle keyword.other.declaration.dataset.vehicle
#       ^^^^^^^^^^^^^^^^ source.vehicle
#                       ^ source.vehicle keyword.operator.colon.vehicle
#                        ^ source.vehicle
#                         ^^^^^^ source.vehicle support.type.tensor.vehicle
#                               ^^^^^^^^^^^ source.vehicle
>dataset trainingLabels : Tensor Label [n]
#^^^^^^^ source.vehicle keyword.other.declaration.dataset.vehicle
#       ^^^^^^^^^^^^^^^^ source.vehicle
#                       ^ source.vehicle keyword.operator.colon.vehicle
#                        ^ source.vehicle
#                         ^^^^^^ source.vehicle support.type.tensor.vehicle
#                               ^^^^^^^^^^^ source.vehicle
>
>-- We then say that the network is robust if it is robust around every pair
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- of input images and output labels. Note the use of the `foreach`
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- keyword when quantifying over the index `i` in the dataset. Whereas `forall`
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- would return a single `Bool`, `foreach` returns a `Tensor` of booleans,
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ensuring that Vehicle will report on the verification status of each image in
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- the dataset separately. If `forall` was omitted, Vehicle would only
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- report if the network was robust around *every* image in the dataset, a
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- state of affairs which is unlikely to be true.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>robust : Tensor Bool [n]
#^^^^^^^ source.vehicle
#       ^ source.vehicle keyword.operator.colon.vehicle
#        ^ source.vehicle
#         ^^^^^^ source.vehicle support.type.tensor.vehicle
#               ^ source.vehicle
#                ^^^^ source.vehicle support.type.bool.vehicle
#                    ^^^^^ source.vehicle
>robust = foreach i .
#^^^^^^^ source.vehicle
#       ^ source.vehicle keyword.operator.define.vehicle
#        ^^ source.vehicle
#          ^^ source.vehicle keyword.operator.or.vehicle
#            ^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.dot.vehicle
>  robustAround (trainingImages ! i) (trainingLabels ! i)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                               ^ source.vehicle keyword.operator.lookup.vehicle
#                                ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                    ^ source.vehicle keyword.operator.lookup.vehicle
#                                                     ^^^^ source.vehicle