>@network
#^^^^^^^^ source.vehicle keyword.other.declaration.network.vehicle
>f : Tensor Rat [1] -> Tensor Rat [1]
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.colon.vehicle
#   ^ source.vehicle
#    ^^^^^^ source.vehicle support.type.tensor.vehicle
#          ^ source.vehicle
#           ^^^ source.vehicle support.type.rat.vehicle
#              ^^ source.vehicle
#                ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                 ^^ source.vehicle
#                   ^^ source.vehicle keyword.operator.arrow.vehicle
#                     ^ source.vehicle
#                      ^^^^^^ source.vehicle support.type.tensor.vehicle
#                            ^ source.vehicle
#                             ^^^ source.vehicle support.type.rat.vehicle
#                                ^^ source.vehicle
#                                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                   ^^ source.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>p : Bool
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.colon.vehicle
#   ^ source.vehicle
#    ^^^^ source.vehicle support.type.bool.vehicle
>p = forall y . (forall x . f [x] != [y]) => y == 0
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.define.vehicle
#   ^ source.vehicle
#    ^^^^^^ source.vehicle keyword.control.forall.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.dot.vehicle
#              ^^ source.vehicle
#                ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                      ^^^ source.vehicle
#                         ^ source.vehicle keyword.operator.dot.vehicle
#                          ^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.distinct.vehicle
#                                   ^^^^^^ source.vehicle
#                                         ^^ source.vehicle keyword.operator.implies.vehicle
#                                           ^^^ source.vehicle
#                                              ^^ source.vehicle keyword.operator.equal.vehicle
#                                                ^ source.vehicle
#                                                 ^ source.vehicle constant.numeric.integral.decimal.vehicle
>