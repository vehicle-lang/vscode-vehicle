>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Full specification of the ACAS XU networks
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Taken from Appendix VI of "Reluplex: An Efficient SMT Solver for Verifying
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Deep Neural Networks" at https://arxiv.org/pdf/1702.01135.pdf
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Comments describing the properties are taken directly from the text.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Utilities
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- The value of the constant `pi`.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>pi = 3.141592
#^^^ source.vehicle
#   ^ source.vehicle keyword.operator.define.vehicle
#    ^ source.vehicle
#     ^^^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Inputs
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- We first define a new name for the type of inputs of the network.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- In particular, it takes inputs of the form of a vector of 5 rational numbers.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>type InputVector = Vector Rat 5
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^^^^^^^ source.vehicle
#              ^^ source.vehicle keyword.operator.or.vehicle
#                ^ source.vehicle
#                 ^ source.vehicle keyword.operator.define.vehicle
#                  ^ source.vehicle
#                   ^^^^^^ source.vehicle support.type.vector.vehicle
#                         ^ source.vehicle
#                          ^^^ source.vehicle support.type.rat.vehicle
#                             ^ source.vehicle
#                              ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>-- Next we add meaningful names for the indices.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- The fact that all vector types come annotated with their size means that it
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- is impossible to mess up indexing into vectors, e.g. if you changed
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- `distanceToIntruder = 0` to `distanceToIntruder = 5` the specification would
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- fail to type-check.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>distanceToIntruder = 0   -- measured in metres
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                      ^^^ source.vehicle
#                         ^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#                           ^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>angleToIntruder    = 1   -- measured in radians
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                      ^^^ source.vehicle
#                         ^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#                           ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>intruderHeading    = 2   -- measured in radians
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                      ^^^ source.vehicle
#                         ^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#                           ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>speed              = 3   -- measured in metres/second
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                      ^^^ source.vehicle
#                         ^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>intruderSpeed      = 4   -- measured in meters/second
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                      ^^^ source.vehicle
#                         ^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Outputs
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Outputs are also a vector of 5 rationals. Each one representing the score
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- for the 5 available courses of action.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>type OutputVector = Vector Rat 5
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^^^^^^^^ source.vehicle
#               ^^ source.vehicle keyword.operator.or.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle keyword.operator.define.vehicle
#                   ^ source.vehicle
#                    ^^^^^^ source.vehicle support.type.vector.vehicle
#                          ^ source.vehicle
#                           ^^^ source.vehicle support.type.rat.vehicle
#                              ^ source.vehicle
#                               ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>-- Again we define meaningful names for the indices into output vectors.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>clearOfConflict = 0
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
>weakLeft        = 1
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
>weakRight       = 2
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
>strongLeft      = 3
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
>strongRight     = 4
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
#                 ^ source.vehicle
#                  ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- The network
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Next we use the `network` annotation to declare the name and the type of the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- neural network we are verifying. The implementation is passed to the compiler
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- via a reference to the ONNX file at compile time.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>@network
#^^^^^^^^ source.vehicle keyword.other.declaration.network.vehicle
>acasXu : InputVector -> OutputVector
#^^^^^^^ source.vehicle
#       ^ source.vehicle keyword.operator.colon.vehicle
#        ^^^^^^^^^^ source.vehicle
#                  ^^ source.vehicle keyword.operator.or.vehicle
#                    ^ source.vehicle
#                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                       ^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.or.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Normalisation
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- As is common in machine learning, the network operates over
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- normalised values, rather than values in the problem space
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- (e.g. using standard units like m/s).
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- This is an issue for us, as we would like to write our specification in
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- terms of the problem space values .
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Therefore before applying the network, we first have to normalise
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- the values in the problem space.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- For clarity, we therefore define a new type synonym
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- for unnormalised input vectors which are in the problem space.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>type UnnormalisedInputVector = Vector Rat 5
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.or.vehicle
#          ^^^^^^^^^^^^^^^^ source.vehicle
#                          ^^ source.vehicle keyword.operator.or.vehicle
#                            ^ source.vehicle
#                             ^ source.vehicle keyword.operator.define.vehicle
#                              ^ source.vehicle
#                               ^^^^^^ source.vehicle support.type.vector.vehicle
#                                     ^ source.vehicle
#                                      ^^^ source.vehicle support.type.rat.vehicle
#                                         ^ source.vehicle
#                                          ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>-- Next we define the minimum and maximum values that each input can take.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- These correspond to the range of the inputs that the network is designed
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- to work over.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>minimumInputValues : UnnormalisedInputVector
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.colon.vehicle
#                    ^^^^ source.vehicle
#                        ^^ source.vehicle keyword.operator.or.vehicle
#                          ^^^^^^^^^^^^^^^^ source.vehicle
#                                          ^^ source.vehicle keyword.operator.or.vehicle
>minimumInputValues = [0,0,0,0,0]
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^^ source.vehicle
#                      ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                       ^ source.vehicle
#                        ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                         ^ source.vehicle
#                          ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                           ^ source.vehicle
#                            ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                             ^ source.vehicle
#                              ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                               ^^ source.vehicle
>
>maximumInputValues : UnnormalisedInputVector
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.colon.vehicle
#                    ^^^^ source.vehicle
#                        ^^ source.vehicle keyword.operator.or.vehicle
#                          ^^^^^^^^^^^^^^^^ source.vehicle
#                                          ^^ source.vehicle keyword.operator.or.vehicle
>maximumInputValues = [60261.0, 2*pi, 2*pi, 1100.0, 1200.0]
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
#                    ^^ source.vehicle
#                      ^^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                             ^^ source.vehicle
#                               ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                ^ source.vehicle keyword.operator.mul.vehicle
#                                 ^^^^ source.vehicle
#                                     ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                      ^ source.vehicle keyword.operator.mul.vehicle
#                                       ^^^^ source.vehicle
#                                           ^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                                 ^^ source.vehicle
#                                                   ^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                                         ^^ source.vehicle
>
>-- We can therefore define a simple predicate saying whether a given input
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- vector is in the right range.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>validInput : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^^^^ source.vehicle
#                ^^ source.vehicle keyword.operator.or.vehicle
#                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.or.vehicle
#                                    ^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                                       ^ source.vehicle
#                                        ^^^^ source.vehicle support.type.bool.vehicle
>validInput x = forall i . minimumInputValues ! i <= x ! i <= maximumInputValues ! i
#^^^^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.define.vehicle
#              ^ source.vehicle
#               ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                     ^^^ source.vehicle
#                        ^ source.vehicle keyword.operator.dot.vehicle
#                         ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                             ^ source.vehicle keyword.operator.lookup.vehicle
#                                              ^^^ source.vehicle
#                                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                                   ^^^ source.vehicle
#                                                      ^ source.vehicle keyword.operator.lookup.vehicle
#                                                       ^^^ source.vehicle
#                                                          ^^ source.vehicle keyword.operator.lte.vehicle
#                                                            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                                ^ source.vehicle keyword.operator.lookup.vehicle
#                                                                                 ^^^ source.vehicle
>
>-- Then the mean values that will be used to scale the inputs.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>meanScalingValues : UnnormalisedInputVector
#^^^^^^^^^^^^^^^^^^ source.vehicle
#                  ^ source.vehicle keyword.operator.colon.vehicle
#                   ^^^^ source.vehicle
#                       ^^ source.vehicle keyword.operator.or.vehicle
#                         ^^^^^^^^^^^^^^^^ source.vehicle
#                                         ^^ source.vehicle keyword.operator.or.vehicle
>meanScalingValues = [19791.091, 0.0, 0.0, 650.0, 600.0]
#^^^^^^^^^^^^^^^^^^ source.vehicle
#                  ^ source.vehicle keyword.operator.define.vehicle
#                   ^^ source.vehicle
#                     ^^^^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                              ^^ source.vehicle
#                                ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                   ^^ source.vehicle
#                                     ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                        ^^ source.vehicle
#                                          ^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                               ^^ source.vehicle
#                                                 ^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                                      ^^ source.vehicle
>
>-- We can now define the normalisation function that takes an input vector and
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- returns the unnormalised version.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>normalise : UnnormalisedInputVector -> InputVector
#^ source.vehicle
# ^^ source.vehicle keyword.operator.or.vehicle
#   ^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^^^^ source.vehicle
#               ^^ source.vehicle keyword.operator.or.vehicle
#                 ^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.or.vehicle
#                                   ^ source.vehicle
#                                    ^^ source.vehicle keyword.operator.arrow.vehicle
#                                      ^^^^^^^^^^ source.vehicle
#                                                ^^ source.vehicle keyword.operator.or.vehicle
>normalise x = foreach i .
#^ source.vehicle
# ^^ source.vehicle keyword.operator.or.vehicle
#   ^^^^^^^^^ source.vehicle
#            ^ source.vehicle keyword.operator.define.vehicle
#             ^ source.vehicle
#              ^^^^^^^ source.vehicle keyword.control.foreach.vehicle
#                     ^^^ source.vehicle
#                        ^ source.vehicle keyword.operator.dot.vehicle
>  (x ! i - meanScalingValues ! i) / (maximumInputValues ! i)
#^^^^^ source.vehicle
#     ^ source.vehicle keyword.operator.lookup.vehicle
#      ^^^ source.vehicle
#         ^ source.vehicle keyword.operator.sub.vehicle
#          ^^^^^^^^^^^^^^^^^^^ source.vehicle
#                             ^ source.vehicle keyword.operator.lookup.vehicle
#                              ^^^^ source.vehicle
#                                  ^ source.vehicle keyword.operator.div.vehicle
#                                   ^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                        ^ source.vehicle keyword.operator.lookup.vehicle
#                                                         ^^^^ source.vehicle
>
>-- Using this we can define a new function that first normalises the input
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- vector and then applies the neural network.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>normAcasXu : UnnormalisedInputVector -> OutputVector
#^ source.vehicle
# ^^ source.vehicle keyword.operator.or.vehicle
#   ^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^^^^ source.vehicle
#                ^^ source.vehicle keyword.operator.or.vehicle
#                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.or.vehicle
#                                    ^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                                       ^^^^^^^^^^^ source.vehicle
#                                                  ^^ source.vehicle keyword.operator.or.vehicle
>normAcasXu x = acasXu (normalise x)
#^ source.vehicle
# ^^ source.vehicle keyword.operator.or.vehicle
#   ^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.define.vehicle
#              ^^^^^^^^^^ source.vehicle
#                        ^^ source.vehicle keyword.operator.or.vehicle
#                          ^^^^^^^^^^ source.vehicle
>
>-- A constraint that says the network chooses output `i` when given the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- input `x`. We must necessarily provide a finite index that is less than 5
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- (i.e. of type Index 5). The `a ! b` operator lookups index `b` in vector `a`.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>advises : Index 5 -> UnnormalisedInputVector -> Bool
#^^^^^^^^ source.vehicle
#        ^ source.vehicle keyword.operator.colon.vehicle
#         ^ source.vehicle
#          ^^^^^ source.vehicle support.type.index.vehicle
#               ^ source.vehicle
#                ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                 ^ source.vehicle
#                  ^^ source.vehicle keyword.operator.arrow.vehicle
#                    ^^^^ source.vehicle
#                        ^^ source.vehicle keyword.operator.or.vehicle
#                          ^^^^^^^^^^^^^^^^ source.vehicle
#                                          ^^ source.vehicle keyword.operator.or.vehicle
#                                            ^ source.vehicle
#                                             ^^ source.vehicle keyword.operator.arrow.vehicle
#                                               ^ source.vehicle
#                                                ^^^^ source.vehicle support.type.bool.vehicle
>advises i x = forall j . i != j => normAcasXu x ! i < normAcasXu x ! j
#^^^^^^^^^^^^ source.vehicle
#            ^ source.vehicle keyword.operator.define.vehicle
#             ^ source.vehicle
#              ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                    ^^^ source.vehicle
#                       ^ source.vehicle keyword.operator.dot.vehicle
#                        ^^^ source.vehicle
#                           ^^ source.vehicle keyword.operator.distinct.vehicle
#                             ^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.implies.vehicle
#                                  ^^ source.vehicle
#                                    ^^ source.vehicle keyword.operator.or.vehicle
#                                      ^^^^^^^^^^ source.vehicle
#                                                ^ source.vehicle keyword.operator.lookup.vehicle
#                                                 ^^^ source.vehicle
#                                                    ^ source.vehicle keyword.operator.lt.vehicle
#                                                     ^^ source.vehicle
#                                                       ^^ source.vehicle keyword.operator.or.vehicle
#                                                         ^^^^^^^^^^ source.vehicle
#                                                                   ^ source.vehicle keyword.operator.lookup.vehicle
#                                                                    ^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 1
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is distant and is significantly slower than the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ownship, the score of a COC advisory will always be below a certain fixed
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- threshold.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: all 45 networks.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>intruderDistantAndSlower : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                         ^ source.vehicle keyword.operator.colon.vehicle
#                          ^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.or.vehicle
#                                ^^^^^^^^^^^^^^^^ source.vehicle
#                                                ^^ source.vehicle keyword.operator.or.vehicle
#                                                  ^ source.vehicle
#                                                   ^^ source.vehicle keyword.operator.arrow.vehicle
#                                                     ^ source.vehicle
#                                                      ^^^^ source.vehicle support.type.bool.vehicle
>intruderDistantAndSlower x =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                           ^ source.vehicle keyword.operator.define.vehicle
>  x ! distanceToIntruder >= 55947.691 and
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.gte.vehicle
#                           ^ source.vehicle
#                            ^^^^^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                     ^ source.vehicle
#                                      ^^^ source.vehicle keyword.operator.and.vehicle
>  x ! speed              >= 1145      and
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.gte.vehicle
#                           ^ source.vehicle
#                            ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                ^^^^^^ source.vehicle
#                                      ^^^ source.vehicle keyword.operator.and.vehicle
>  x ! intruderSpeed      <= 60
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                         ^^ source.vehicle keyword.operator.lte.vehicle
#                           ^ source.vehicle
#                            ^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property1 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property1 = forall x . validInput x and intruderDistantAndSlower x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                   ^^ source.vehicle keyword.operator.implies.vehicle
>  normAcasXu x ! clearOfConflict <= 1500
#^^^ source.vehicle
#   ^^ source.vehicle keyword.operator.or.vehicle
#     ^^^^^^^^^^ source.vehicle
#               ^ source.vehicle keyword.operator.lookup.vehicle
#                ^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 2
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is distant and is significantly slower than the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ownship, the score of a COC advisory will never be maximal.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{x,y} for all x ≥ 2 and for all y
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property2 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property2 = forall x . validInput x and intruderDistantAndSlower x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                   ^^ source.vehicle keyword.operator.implies.vehicle
>  (exists j . (normAcasXu x ! j) > (normAcasXu x ! clearOfConflict))
#^^^ source.vehicle
#   ^^^^^^ source.vehicle keyword.control.exists.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.dot.vehicle
#             ^^^ source.vehicle
#                ^^ source.vehicle keyword.operator.or.vehicle
#                  ^^^^^^^^^^ source.vehicle
#                            ^ source.vehicle keyword.operator.lookup.vehicle
#                             ^^^^ source.vehicle
#                                 ^ source.vehicle keyword.operator.gt.vehicle
#                                  ^^^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.or.vehicle
#                                       ^^^^^^^^^^ source.vehicle
#                                                 ^ source.vehicle keyword.operator.lookup.vehicle
#                                                  ^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 3
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is directly ahead and is moving towards the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ownship, the score for COC will not be minimal.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: all networks except N_{1,7}, N_{1,8}, and N_{1,9}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>directlyAhead : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^ source.vehicle
#              ^ source.vehicle keyword.operator.colon.vehicle
#               ^^^^ source.vehicle
#                   ^^ source.vehicle keyword.operator.or.vehicle
#                     ^^^^^^^^^^^^^^^^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.or.vehicle
#                                       ^ source.vehicle
#                                        ^^ source.vehicle keyword.operator.arrow.vehicle
#                                          ^ source.vehicle
#                                           ^^^^ source.vehicle support.type.bool.vehicle
>directlyAhead x =
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
>  1500  <= x ! distanceToIntruder <= 1800 and
#^^ source.vehicle
#  ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#      ^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                         ^ source.vehicle
#                                          ^^^ source.vehicle keyword.operator.and.vehicle
>  -0.06 <= x ! angleToIntruder    <= 0.06
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#       ^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
>
>movingTowards : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^ source.vehicle
#              ^ source.vehicle keyword.operator.colon.vehicle
#               ^^^^ source.vehicle
#                   ^^ source.vehicle keyword.operator.or.vehicle
#                     ^^^^^^^^^^^^^^^^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.or.vehicle
#                                       ^ source.vehicle
#                                        ^^ source.vehicle keyword.operator.arrow.vehicle
#                                          ^ source.vehicle
#                                           ^^^^ source.vehicle support.type.bool.vehicle
>movingTowards x =
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.define.vehicle
>  x ! intruderHeading >= 3.10  and
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.gte.vehicle
#                        ^ source.vehicle
#                         ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                             ^^ source.vehicle
#                               ^^^ source.vehicle keyword.operator.and.vehicle
>  x ! speed           >= 980   and
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.gte.vehicle
#                        ^ source.vehicle
#                         ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                            ^^^ source.vehicle
#                               ^^^ source.vehicle keyword.operator.and.vehicle
>  x ! intruderSpeed   >= 960
#^^^^ source.vehicle
#    ^ source.vehicle keyword.operator.lookup.vehicle
#     ^^^^^^^^^^^^^^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.gte.vehicle
#                        ^ source.vehicle
#                         ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property3 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property3 = forall x . validInput x and directlyAhead x and movingTowards x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^ source.vehicle
#                                                        ^^^ source.vehicle keyword.operator.and.vehicle
#                                                           ^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                            ^^ source.vehicle keyword.operator.implies.vehicle
>  not (advises clearOfConflict x)
#^^ source.vehicle
#  ^^^ source.vehicle constant.language.not.vehicle
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 4
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is directly ahead and is moving away from the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- ownship but at a lower speed than that of the ownship, the score for COC
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- will not be minimal.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: all networks except N_{1,7}, N_{1,8}, and N_{1,9}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>movingAway : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^^^^ source.vehicle
#                ^^ source.vehicle keyword.operator.or.vehicle
#                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.or.vehicle
#                                    ^ source.vehicle
#                                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                                       ^ source.vehicle
#                                        ^^^^ source.vehicle support.type.bool.vehicle
>movingAway x =
#^^^^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.define.vehicle
>          x ! intruderHeading == 0   and
#^^^^^^^^^^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.equal.vehicle
#                                ^ source.vehicle
#                                 ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                  ^^^ source.vehicle
#                                     ^^^ source.vehicle keyword.operator.and.vehicle
>  1000 <= x ! speed                  and
#^^ source.vehicle
#  ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#      ^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                     ^^^ source.vehicle keyword.operator.and.vehicle
>  700  <= x ! intruderSpeed   <= 800
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.lte.vehicle
#                                ^ source.vehicle
#                                 ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property4 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property4 = forall x . validInput x and directlyAhead x and movingAway x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^ source.vehicle
#                                                        ^^^ source.vehicle keyword.operator.and.vehicle
#                                                           ^^^^^^^^^^^^^^ source.vehicle
#                                                                         ^^ source.vehicle keyword.operator.implies.vehicle
>  not (advises clearOfConflict x)
#^^ source.vehicle
#  ^^^ source.vehicle constant.language.not.vehicle
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 5
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is near and approaching from the left, the network
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- advises “strong right”.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{1,1}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>nearAndApproachingFromLeft : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                           ^ source.vehicle keyword.operator.colon.vehicle
#                            ^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.or.vehicle
#                                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                                  ^^ source.vehicle keyword.operator.or.vehicle
#                                                    ^ source.vehicle
#                                                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                                                       ^ source.vehicle
#                                                        ^^^^ source.vehicle support.type.bool.vehicle
>nearAndApproachingFromLeft x =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                             ^ source.vehicle keyword.operator.define.vehicle
>  250 <= x ! distanceToIntruder <= 400         and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^ source.vehicle
#      ^^ source.vehicle keyword.operator.lte.vehicle
#        ^^^ source.vehicle
#           ^ source.vehicle keyword.operator.lookup.vehicle
#            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.lte.vehicle
#                                  ^ source.vehicle
#                                   ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                      ^^^^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  0.2 <= x ! angleToIntruder    <= 0.4         and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#     ^ source.vehicle
#      ^^ source.vehicle keyword.operator.lte.vehicle
#        ^^^ source.vehicle
#           ^ source.vehicle keyword.operator.lookup.vehicle
#            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.lte.vehicle
#                                  ^ source.vehicle
#                                   ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                      ^^^^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi <= x ! intruderHeading    <= -pi + 0.005 and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^ source.vehicle
#      ^^ source.vehicle keyword.operator.lte.vehicle
#        ^^^ source.vehicle
#           ^ source.vehicle keyword.operator.lookup.vehicle
#            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.lte.vehicle
#                                  ^ source.vehicle
#                                   ^ source.vehicle keyword.operator.sub.vehicle
#                                    ^^^ source.vehicle
#                                       ^ source.vehicle keyword.operator.add.vehicle
#                                        ^ source.vehicle
#                                         ^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                              ^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  100 <= x ! speed              <= 400         and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^ source.vehicle
#      ^^ source.vehicle keyword.operator.lte.vehicle
#        ^^^ source.vehicle
#           ^ source.vehicle keyword.operator.lookup.vehicle
#            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.lte.vehicle
#                                  ^ source.vehicle
#                                   ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                      ^^^^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  0   <= x ! intruderSpeed      <= 400
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^ source.vehicle
#      ^^ source.vehicle keyword.operator.lte.vehicle
#        ^^^ source.vehicle
#           ^ source.vehicle keyword.operator.lookup.vehicle
#            ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                ^^ source.vehicle keyword.operator.lte.vehicle
#                                  ^ source.vehicle
#                                   ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property5 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property5 = forall x . validInput x and nearAndApproachingFromLeft x => advises strongRight x
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                     ^^ source.vehicle keyword.operator.implies.vehicle
#                                                                       ^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 6
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If the intruder is sufficiently far away, the network advises COC.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{1,1}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>intruderFarAway : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^ source.vehicle
#                ^ source.vehicle keyword.operator.colon.vehicle
#                 ^^^^ source.vehicle
#                     ^^ source.vehicle keyword.operator.or.vehicle
#                       ^^^^^^^^^^^^^^^^ source.vehicle
#                                       ^^ source.vehicle keyword.operator.or.vehicle
#                                         ^ source.vehicle
#                                          ^^ source.vehicle keyword.operator.arrow.vehicle
#                                            ^ source.vehicle
#                                             ^^^^ source.vehicle support.type.bool.vehicle
>intruderFarAway x =
#^^^^^^^^^^^^^^^^^^ source.vehicle
#                  ^ source.vehicle keyword.operator.define.vehicle
>  12000 <= x ! distanceToIntruder <= 62000                                  and
#^^ source.vehicle
#  ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#       ^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                            ^^^ source.vehicle keyword.operator.and.vehicle
>  (- pi <= x ! angleToIntruder <= -0.7 or 0.7 <= x ! angleToIntruder <= pi) and
#^^^^^^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^ source.vehicle
#                               ^^ source.vehicle keyword.operator.lte.vehicle
#                                 ^ source.vehicle
#                                  ^ source.vehicle keyword.operator.sub.vehicle
#                                   ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                      ^ source.vehicle
#                                       ^^ source.vehicle keyword.operator.or.vehicle
#                                         ^ source.vehicle
#                                          ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                             ^ source.vehicle
#                                              ^^ source.vehicle keyword.operator.lte.vehicle
#                                                ^^^ source.vehicle
#                                                   ^ source.vehicle keyword.operator.lookup.vehicle
#                                                    ^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                     ^^ source.vehicle keyword.operator.lte.vehicle
#                                                                       ^^^^^ source.vehicle
#                                                                            ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi   <= x ! intruderHeading    <= -pi + 0.005                            and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^ source.vehicle keyword.operator.sub.vehicle
#                                      ^^^ source.vehicle
#                                         ^ source.vehicle keyword.operator.add.vehicle
#                                          ^ source.vehicle
#                                           ^^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                            ^^^ source.vehicle keyword.operator.and.vehicle
>  100   <= x ! speed              <= 1200                                   and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                            ^^^ source.vehicle keyword.operator.and.vehicle
>  0     <= x ! intruderSpeed      <= 1200
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property6 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property6 = forall x . validInput x and intruderFarAway x => advises clearOfConflict x
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                          ^^ source.vehicle keyword.operator.implies.vehicle
#                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 7
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- If vertical separation is large, the network will never advise a strong turn.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{1,9}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>largeVerticalSeparation : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                        ^ source.vehicle keyword.operator.colon.vehicle
#                         ^^^^ source.vehicle
#                             ^^ source.vehicle keyword.operator.or.vehicle
#                               ^^^^^^^^^^^^^^^^ source.vehicle
#                                               ^^ source.vehicle keyword.operator.or.vehicle
#                                                 ^ source.vehicle
#                                                  ^^ source.vehicle keyword.operator.arrow.vehicle
#                                                    ^ source.vehicle
#                                                     ^^^^ source.vehicle support.type.bool.vehicle
>largeVerticalSeparation x =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                          ^ source.vehicle keyword.operator.define.vehicle
>  0    <= x ! distanceToIntruder <= 60760  and
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                         ^^ source.vehicle
#                                           ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi  <= x ! angleToIntruder    <= pi     and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^^^^^^^^ source.vehicle
#                                           ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi  <= x ! intruderHeading    <= pi     and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^^^^^^^^ source.vehicle
#                                           ^^^ source.vehicle keyword.operator.and.vehicle
>  100  <= x ! speed              <= 1200   and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                        ^^^ source.vehicle
#                                           ^^^ source.vehicle keyword.operator.and.vehicle
>  0    <= x ! intruderSpeed      <= 1200
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property7 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property7 = forall x . validInput x and largeVerticalSeparation x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                  ^^ source.vehicle keyword.operator.implies.vehicle
>  not (advises strongLeft x) and not (advises strongRight x)
#^^ source.vehicle
#  ^^^ source.vehicle constant.language.not.vehicle
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                             ^^^ source.vehicle keyword.operator.and.vehicle
#                                ^ source.vehicle
#                                 ^^^ source.vehicle constant.language.not.vehicle
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 8
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- For a large vertical separation and a previous “weak left” advisory, the
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- network will either output COC or continue advising “weak left”.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{2,9}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>largeVerticalSeparationAndPreviousWeakLeft : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                           ^ source.vehicle keyword.operator.colon.vehicle
#                                            ^^^^ source.vehicle
#                                                ^^ source.vehicle keyword.operator.or.vehicle
#                                                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                                                  ^^ source.vehicle keyword.operator.or.vehicle
#                                                                    ^ source.vehicle
#                                                                     ^^ source.vehicle keyword.operator.arrow.vehicle
#                                                                       ^ source.vehicle
#                                                                        ^^^^ source.vehicle support.type.bool.vehicle
>largeVerticalSeparationAndPreviousWeakLeft x =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                             ^ source.vehicle keyword.operator.define.vehicle
>  0    <= x ! distanceToIntruder <= 60760    and
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                         ^^^^ source.vehicle
#                                             ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi  <= x ! angleToIntruder    <= -0.75*pi and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^ source.vehicle keyword.operator.sub.vehicle
#                                     ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                         ^ source.vehicle keyword.operator.mul.vehicle
#                                          ^^^ source.vehicle
#                                             ^^^ source.vehicle keyword.operator.and.vehicle
>  -0.1 <= x ! intruderHeading    <= 0.1      and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#      ^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                       ^^^^^^ source.vehicle
#                                             ^^^ source.vehicle keyword.operator.and.vehicle
>  600  <= x ! speed              <= 1200     and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                        ^^^^^ source.vehicle
#                                             ^^^ source.vehicle keyword.operator.and.vehicle
>  600  <= x ! intruderSpeed      <= 1200
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property8 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property8 = forall x . validInput x and largeVerticalSeparationAndPreviousWeakLeft x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                                     ^^ source.vehicle keyword.operator.implies.vehicle
>  (advises clearOfConflict x) or (advises weakLeft x)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.or.vehicle
#                                ^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 9
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Even if the previous advisory was “weak right”, the presence of a nearby
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- intruder will cause the network to output a “strong left” advisory instead.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{3,3}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>previousWeakRightAndNearbyIntruder : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                   ^ source.vehicle keyword.operator.colon.vehicle
#                                    ^^^^ source.vehicle
#                                        ^^ source.vehicle keyword.operator.or.vehicle
#                                          ^^^^^^^^^^^^^^^^ source.vehicle
#                                                          ^^ source.vehicle keyword.operator.or.vehicle
#                                                            ^ source.vehicle
#                                                             ^^ source.vehicle keyword.operator.arrow.vehicle
#                                                               ^ source.vehicle
#                                                                ^^^^ source.vehicle support.type.bool.vehicle
>previousWeakRightAndNearbyIntruder x =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                     ^ source.vehicle keyword.operator.define.vehicle
>  2000 <= x ! distanceToIntruder <= 7000       and
#^^ source.vehicle
#  ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#      ^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                        ^^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  -0.4 <= x ! angleToIntruder    <= -0.14      and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#      ^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^ source.vehicle keyword.operator.sub.vehicle
#                                     ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                         ^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi  <= x ! intruderHeading    <= -pi + 0.01 and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^ source.vehicle keyword.operator.sub.vehicle
#                                     ^^^ source.vehicle
#                                        ^ source.vehicle keyword.operator.add.vehicle
#                                         ^ source.vehicle
#                                          ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                              ^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  100  <= x ! speed              <= 150        and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                       ^^^^^^^^ source.vehicle
#                                               ^^^ source.vehicle keyword.operator.and.vehicle
>  0    <= x ! intruderSpeed      <= 150
#^^ source.vehicle
#  ^ source.vehicle constant.numeric.integral.decimal.vehicle
#   ^^^^ source.vehicle
#       ^^ source.vehicle keyword.operator.lte.vehicle
#         ^^^ source.vehicle
#            ^ source.vehicle keyword.operator.lookup.vehicle
#             ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.lte.vehicle
#                                   ^ source.vehicle
#                                    ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property9 : Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^ source.vehicle
#            ^^^^ source.vehicle support.type.bool.vehicle
>property9 = forall x . validInput x and previousWeakRightAndNearbyIntruder x =>
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.define.vehicle
#           ^ source.vehicle
#            ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                  ^^^ source.vehicle
#                     ^ source.vehicle keyword.operator.dot.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^^^ source.vehicle keyword.operator.and.vehicle
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                             ^^ source.vehicle keyword.operator.implies.vehicle
>  advises strongLeft x
#^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Property 10
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- For a far away intruder, the network advises COC.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>-- Tested on: N_{4,5}.
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>intruderFarAway2 : UnnormalisedInputVector -> Bool
#^^^^^^^^^^^^^^^^^ source.vehicle
#                 ^ source.vehicle keyword.operator.colon.vehicle
#                  ^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.or.vehicle
#                        ^^^^^^^^^^^^^^^^ source.vehicle
#                                        ^^ source.vehicle keyword.operator.or.vehicle
#                                          ^ source.vehicle
#                                           ^^ source.vehicle keyword.operator.arrow.vehicle
#                                             ^ source.vehicle
#                                              ^^^^ source.vehicle support.type.bool.vehicle
>intruderFarAway2 x =
#^^^^^^^^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.define.vehicle
>  36000 <= x ! distanceToIntruder <= 60760       and
#^^ source.vehicle
#  ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#       ^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                          ^^^^^^^ source.vehicle
#                                                 ^^^ source.vehicle keyword.operator.and.vehicle
>  0.7   <= x ! angleToIntruder    <= pi          and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#     ^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^^^^^^^^^^^^^ source.vehicle
#                                                 ^^^ source.vehicle keyword.operator.and.vehicle
>  -pi   <= x ! intruderHeading    <= -pi + 0.01  and
#^^ source.vehicle
#  ^ source.vehicle keyword.operator.sub.vehicle
#   ^^^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^ source.vehicle keyword.operator.sub.vehicle
#                                      ^^^ source.vehicle
#                                         ^ source.vehicle keyword.operator.add.vehicle
#                                          ^ source.vehicle
#                                           ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                                               ^^ source.vehicle
#                                                 ^^^ source.vehicle keyword.operator.and.vehicle
>  900   <= x ! speed              <= 1200        and
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                         ^^^^^^^^ source.vehicle
#                                                 ^^^ source.vehicle keyword.operator.and.vehicle
>  600   <= x ! intruderSpeed      <= 1200
#^^ source.vehicle
#  ^^^ source.vehicle constant.numeric.integral.decimal.vehicle
#     ^^^ source.vehicle
#        ^^ source.vehicle keyword.operator.lte.vehicle
#          ^^^ source.vehicle
#             ^ source.vehicle keyword.operator.lookup.vehicle
#              ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                  ^^ source.vehicle keyword.operator.lte.vehicle
#                                    ^ source.vehicle
#                                     ^^^^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>@property
#^^^^^^^^^ source.vehicle keyword.other.declaration.property.vehicle
>property10 : Bool
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^ source.vehicle
#             ^^^^ source.vehicle support.type.bool.vehicle
>property10 = forall x . validInput x and intruderFarAway2 x => advises clearOfConflict x
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.define.vehicle
#            ^ source.vehicle
#             ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                   ^^^ source.vehicle
#                      ^ source.vehicle keyword.operator.dot.vehicle
#                       ^^^^^^^^^^^^^^ source.vehicle
#                                     ^^^ source.vehicle keyword.operator.and.vehicle
#                                        ^^^^^^^^^^^^^^^^^^^^ source.vehicle
#                                                            ^^ source.vehicle keyword.operator.implies.vehicle
#                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle
>