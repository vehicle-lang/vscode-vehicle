>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Inputs and outputs
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>type InputVector = Tensor Rat [2]
#^^^^ source.vehicle keyword.other.declaration.type.vehicle
#    ^^^^^^^^^^ source.vehicle
#              ^^ source.vehicle keyword.operator.or.vehicle
#                ^ source.vehicle
#                 ^ source.vehicle keyword.operator.define.vehicle
#                  ^ source.vehicle
#                   ^^^^^^ source.vehicle support.type.tensor.vehicle
#                         ^ source.vehicle
#                          ^^^ source.vehicle support.type.rat.vehicle
#                             ^^ source.vehicle
#                               ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                ^^ source.vehicle
>
>currentSensor  = 0
#^^^^^^^^^^^ source.vehicle
#           ^^ source.vehicle keyword.operator.or.vehicle
#             ^^ source.vehicle
#               ^ source.vehicle keyword.operator.define.vehicle
#                ^ source.vehicle
#                 ^ source.vehicle constant.numeric.integral.decimal.vehicle
>previousSensor = 1
#^^^^^^^^^^^^ source.vehicle
#            ^^ source.vehicle keyword.operator.or.vehicle
#              ^ source.vehicle
#               ^ source.vehicle keyword.operator.define.vehicle
#                ^ source.vehicle
#                 ^ source.vehicle constant.numeric.integral.decimal.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Network
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>network controller : InputVector -> Tensor Rat [1]
#^^^^^^^ source.vehicle keyword.other.declaration.network.vehicle
#       ^^^^^^^^^^^^ source.vehicle
#                   ^ source.vehicle keyword.operator.colon.vehicle
#                    ^^^^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.or.vehicle
#                                ^ source.vehicle
#                                 ^^ source.vehicle keyword.operator.arrow.vehicle
#                                   ^ source.vehicle
#                                    ^^^^^^ source.vehicle support.type.tensor.vehicle
#                                          ^ source.vehicle
#                                           ^^^ source.vehicle support.type.rat.vehicle
#                                              ^^ source.vehicle
#                                                ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                                 ^^ source.vehicle
>
>--------------------------------------------------------------------------------
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>-- Safety property
#^^ source.vehicle comment.line.double-dash.vehicle punctuation.definition.comment.vehicle
#  ^^^^^^^^^^^^^^^^ source.vehicle comment.line.double-dash.vehicle
>
>safeInput : InputVector -> Bool
#^^^^^^^^^^ source.vehicle
#          ^ source.vehicle keyword.operator.colon.vehicle
#           ^^^^^^^^^^ source.vehicle
#                     ^^ source.vehicle keyword.operator.or.vehicle
#                       ^ source.vehicle
#                        ^^ source.vehicle keyword.operator.arrow.vehicle
#                          ^ source.vehicle
#                           ^^^^ source.vehicle support.type.bool.vehicle
>safeInput x = forall i . -3.25 <= x ! i <= 3.25
#^^^^^^^^^^^^ source.vehicle
#            ^ source.vehicle keyword.operator.define.vehicle
#             ^ source.vehicle
#              ^^^^^^ source.vehicle keyword.control.forall.vehicle
#                    ^^^ source.vehicle
#                       ^ source.vehicle keyword.operator.dot.vehicle
#                        ^ source.vehicle
#                         ^ source.vehicle keyword.operator.sub.vehicle
#                          ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                              ^ source.vehicle
#                               ^^ source.vehicle keyword.operator.lte.vehicle
#                                 ^^^ source.vehicle
#                                    ^ source.vehicle keyword.operator.lookup.vehicle
#                                     ^^^ source.vehicle
#                                        ^^ source.vehicle keyword.operator.lte.vehicle
#                                          ^ source.vehicle
#                                           ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
>
>safeOutput : InputVector -> Bool
#^^^^^^^^^^^ source.vehicle
#           ^ source.vehicle keyword.operator.colon.vehicle
#            ^^^^^^^^^^ source.vehicle
#                      ^^ source.vehicle keyword.operator.or.vehicle
#                        ^ source.vehicle
#                         ^^ source.vehicle keyword.operator.arrow.vehicle
#                           ^ source.vehicle
#                            ^^^^ source.vehicle support.type.bool.vehicle
>safeOutput x = -1.25 < controller x ! 0 + 2 * (x ! currentSensor) - (x ! previousSensor) < 1.25
#^^^^^^^^^^^^^ source.vehicle
#             ^ source.vehicle keyword.operator.define.vehicle
#              ^ source.vehicle
#               ^ source.vehicle keyword.operator.sub.vehicle
#                ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
#                    ^ source.vehicle
#                     ^ source.vehicle keyword.operator.lt.vehicle
#                      ^^^^^^^^^^^^^^ source.vehicle
#                                    ^ source.vehicle keyword.operator.lookup.vehicle
#                                     ^ source.vehicle
#                                      ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                       ^ source.vehicle
#                                        ^ source.vehicle keyword.operator.add.vehicle
#                                         ^ source.vehicle
#                                          ^ source.vehicle constant.numeric.integral.decimal.vehicle
#                                           ^ source.vehicle
#                                            ^ source.vehicle keyword.operator.mul.vehicle
#                                             ^^^^ source.vehicle
#                                                 ^ source.vehicle keyword.operator.lookup.vehicle
#                                                  ^^^^^^^^^^^^^^^^ source.vehicle
#                                                                  ^ source.vehicle keyword.operator.sub.vehicle
#                                                                   ^^^^ source.vehicle
#                                                                       ^ source.vehicle keyword.operator.lookup.vehicle
#                                                                        ^^^^^^^^^^^^^^^^^ source.vehicle
#                                                                                         ^ source.vehicle keyword.operator.lt.vehicle
#                                                                                          ^ source.vehicle
#                                                                                           ^^^^ source.vehicle constant.numeric.floating.decimal.vehicle
>
>safe : Bool
#^^^^^ source.vehicle
#     ^ source.vehicle keyword.operator.colon.vehicle
#      ^ source.vehicle
#       ^^^^ source.vehicle support.type.bool.vehicle
>safe = forall x . safeInput x => safeOutput x
#^^^^^ source.vehicle
#     ^ source.vehicle keyword.operator.define.vehicle
#      ^ source.vehicle
#       ^^^^^^ source.vehicle keyword.control.forall.vehicle
#             ^^^ source.vehicle
#                ^ source.vehicle keyword.operator.dot.vehicle
#                 ^^^^^^^^^^^^^ source.vehicle
#                              ^^ source.vehicle keyword.operator.implies.vehicle
#                                ^^^^^^^^^^^^^^ source.vehicle