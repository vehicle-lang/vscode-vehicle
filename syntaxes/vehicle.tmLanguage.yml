name: Vehicle
scopeName: source.vehicle

patterns:
  - include: "#keywords"
  - include: "#builtins"
  - include: "#comments"
  - include: "#numeric_literals"
  - include: "#holes"

repository:
  # Keywords
  keywords:
    patterns:
      - include: "#declaration_keywords"
      - include: "#control_keywords"

  declaration_keywords:
    match: >-
      (?x)
        ^
        (?:
          (network)
          |(dataset)
          |(((implicit)\s+)?(parameter))
          |(type)
        )
        \b
    captures:
      "1": { name: keyword.other.declaration.network.vehicle }
      "2": { name: keyword.other.declaration.dataset.vehicle }
      "5": { name: keyword.other.declaration.implicit.vehicle }
      "6": { name: keyword.other.declaration.parameter.vehicle }
      "7": { name: keyword.other.declaration.type.vehicle }

  control_keywords:
    match: >-
      (?x)
        \b
        (?:
          (forall)
          |(exists)
          |(foreach)
          |(let)
          |(in)
          |(if)
          |(then)
          |(else)
        )
        \b
    captures:
      "1": { name: keyword.control.forall.vehicle }
      "2": { name: keyword.control.exists.vehicle }
      "3": { name: keyword.control.foreach.vehicle }
      "4": { name: keyword.other.let.vehicle }
      "5": { name: keyword.other.in.vehicle }
      "6": { name: keyword.control.if.vehicle }
      "7": { name: keyword.control.then.vehicle }
      "8": { name: keyword.control.else.vehicle }


  # Builtins
  builtins:
    patterns:
      - include: "#type_builtins"
      - include: "#operator_builtins"
      - include: "#value_builtins"

  value_builtins:
    match: >-
      (?x)
        \b
        (?:
          (\(\))
          |(True)
          |(False)
          |(not)
          |(map)
          |(fold)
        )
        \b
    captures:
      "1": { name: constant.language.unit.vehicle }
      "2": { name: constant.language.true.vehicle }
      "3": { name: constant.language.false.vehicle }

  type_builtins:
    match: >-
      (?x)
        \b
        (?:
          (forallT)
          |(Unit)
          |(Bool)
          |(Nat)
          |(Int)
          |(Rat)
          |(Tensor)
          |(List)
          |(Index)
          |(Type(\s+([0-9]+)))
        )
        \b
    captures:
      "1": { name: support.type.forall.vehicle }
      "2": { name: support.type.unit.vehicle }
      "3": { name: support.type.bool.vehicle }
      "4": { name: support.type.nat.vehicle }
      "5": { name: support.type.int.vehicle }
      "6": { name: support.type.rat.vehicle }
      "7": { name: support.type.tensor.vehicle }
      "8": { name: support.type.list.vehicle }
      "9": { name: support.type.index.vehicle }
      "10": { name: support.type.type.vehicle }
      "12": { name: support.type.universe.vehicle }

  operator_builtins:
    match: >-
      (?x)
        (?<![\p{S}\p{P}])
        (?:
           (->)
          |(\.)
          |(:)
          |(\\)
          |(=>)
          |(==)
          |(!=)
          |(<=)
          |(<)
          |(>=)
          |(>)
          |(\*)
          |(/)
          |(\+)
          |(-)
          |(::)
          |(!)
          |(=)
          |(and)
          |(or)
        )
        (?![\p{S}\p{P}])
    captures:
      "1": { name: keyword.operator.arrow.vehicle }
      "2": { name: keyword.operator.dot.vehicle }
      "3": { name: keyword.operator.colon.vehicle }
      "4": { name: keyword.operator.lambda.vehicle }
      "5": { name: keyword.operator.implies.vehicle }
      "6": { name: keyword.operator.equal.vehicle }
      "7": { name: keyword.operator.distinct.vehicle }
      "8": { name: keyword.operator.lte.vehicle }
      "9": { name: keyword.operator.lt.vehicle }
      "10": { name: keyword.operator.gte.vehicle }
      "11": { name: keyword.operator.gt.vehicle }
      "12": { name: keyword.operator.mul.vehicle }
      "13": { name: keyword.operator.div.vehicle }
      "14": { name: keyword.operator.add.vehicle }
      "15": { name: keyword.operator.sub.vehicle }
      "16": { name: keyword.operator.cons.vehicle }
      "17": { name: keyword.operator.lookup.vehicle }
      "18": { name: keyword.operator.define.vehicle }
      "19": { name: keyword.operator.and.vehicle }
      "20": { name: keyword.operator.or.vehicle }

  # Comments
  comments:
    patterns:
      - include: "#line_comments"
      - include: "#block_comments"
  line_comments:
    begin: >-
      (^[ \t]+)?(?=--+(?![\p{S}\p{P}&&[^(),;\[\]`{}_"']]))
    beginCaptures:
      "1": { name: punctuation.whitespace.comment.leading.vehicle }
    end: '(?!\G)'
    patterns:
      - begin: "--"
        beginCaptures:
          "0": { name: punctuation.definition.comment.vehicle }
        end: \n
        name: comment.line.double-dash.vehicle
  block_comments:
    begin: '\{-'
    captures:
      "0": { name: punctuation.definition.comment.vehicle }
    end: '-\}'
    name: comment.block.vehicle
    patterns:
      - include: "#block_comments"

  # Numeric Literals
  numeric_literals:
    patterns:
      # Need to try to parse floating literals first, to avoid having leftover dots.
      - include: "#float_literals"
      - include: "#integer_literals"
  float_literals:
    match: >-
      (?x)
        \b
        ([0-9]+\.[0-9]+)
        \b
    captures:
      "0": { name: constant.numeric.floating.decimal.vehicle }
  integer_literals:
    match: >-
      (?x)
        \b
        ([0-9]+)
        \b
    captures:
      "0": { name: constant.numeric.integral.decimal.vehicle }

  # Holes
  holes:
    match: \b(\?[A-Za-z0-9_]*)\b
    name: variable.other.hole.vehicle